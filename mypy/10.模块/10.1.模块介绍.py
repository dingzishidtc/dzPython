# 先考虑一个问题，目前我们写的程序都是在一个文件内完成的。
# 如果我要写一个游戏，游戏包含英雄和怪物两个类，英雄又可能继承出其他的战士、法师等类，而怪物同样也可以继承出老虎、狼、小兵等等...
# 这样如果所有的类和继承类都写在一个文件，这样的代码肯定是无法维护的。
# 简单来说，这两种类可以分为两个文件，那么如何在一个文件中调用另一个文件的代码，就发展出了模块和包的概念。
#
# 先介绍模块，首先明确一个概念：模块就是代码。
# 如果在文件A.py中编码了代码，这时 A 就是 A.py 中的代码的模块名
# 如果想使用其他文件里的代码，你需要告诉python：我在某些地方写了一些代码，我现在需要使用这些代码
#       1.我在某些地方写了一些代码
#           可以通过 sys.path.append("D:/workspace/study/python/10.模块/testPath") 告诉 python
#       2.我现在需要使用这些代码
#           通过 import 告诉 python
# 两个步骤缺一不可
#
# 看一个具体的例子：
#       fakeGame/Hero.py    中定义 Hero 类
#       fakeGame/Monster.py 中定义 Monster 类
# 如果要在其他程序中使用 Hero类和Monster类
import sys

# 首先告诉python，在这些地方写了一些代码
sys.path.append("D:/workspace/study/python/10.模块/fakeGame")

# 我现在需要使用这些代码，同时文件名是模块名
import hero
import monster

h = hero.Hero()
m = monster.Monster()

# 使用import 的导入方式，在创建对象时，需要加上模块名作为前缀，还有一种导入模块的方式，可以取消这个限制
# 但是如果多个模块中，定义了重复的类名或者方法名时，
from hero import *
from monster import *

h = Hero()
m = Monster()

# 除此之外，你会发现，这个演示程序中使用了 import sys
# 这个模块并没有被我们定义，也没有告诉pyhton它在哪里，这是因为 sys 是 python 内置的模块，当我们调用 import 时
# python已经知道它位于何方了，平时自己定义模块时，除非有特殊用途，不然要尽量避免和系统内置模块重名

# 知道了如何导入模块，下面请思考一个问题，程序 A 中引入了两个模块 B 和 C，请问出现以下情况 python 如何处理
#       1. A、B、C中定义同名的变量
#       2. A、B、C中定义同名的方法
#       3. A、B、C中定义同名的类
#       4. A、B、C中定义了父类和子类，只有子类同名
#       5. A、B、C中定义了父类和子类，只有父类同名
#       5. A、B、C中定义了父类和子类，子类和父类均同名
# 请自行编写程序验证结果
#       1. 区分变量可以打印变量
#       2. 区分方法可以在方法内打印不同的信息
#       3. 区分类可以在类的init方法中打印不同的信息
#